@using XCode.DataAccessLayer
@using XCoder
@{
    var Config = ViewBag.Config as ModelConfig;
    var Table = ViewBag.Table as IDataTable;
    var Tables = ViewBag.Tables as List<IDataTable>;
}
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml.Serialization;
using XCode;
using XCode.Configuration;
using XCode.DataAccessLayer;

namespace @Config.NameSpace
{
@{
    #region DisplayName
    String tdis = Table.DisplayName;
    if (!String.IsNullOrEmpty(tdis))
    {
        tdis = tdis.Replace("\r\n", " ").Replace("\\", "\\\\").Replace("'", "").Replace("\"", "");
    }

    String tdes = Table.Description;
    if (!String.IsNullOrEmpty(tdes))
    {
        tdes = tdes.Replace("\r\n", " ").Replace("\\", "\\\\").Replace("'", "").Replace("\"", "");

    }
    if (String.IsNullOrEmpty(tdis))
    {
        tdis = tdes;
    }
    #endregion
}
    /// <summary>@tdis</summary>
@if(tdis != tdes)
{
    <text>    /// <remarks>@(tdes)</remarks></text>
    <text></text>
}
    [Serializable]
    [DataObject]
    [Description("@tdes")]
@foreach (IDataIndex di in Table.Indexes)
{
    if (di.Columns == null || di.Columns.Length < 1){continue;}
    <text>    [BindIndex("@di.Name", @di.Unique.ToString().ToLower(), "@String.Join(",", di.Columns)")]</text>
    <text></text>
}
    [BindTable("@Table.TableName", Description = "@tdes", ConnName = "@(Table.ConnName ?? Config.EntityConnName)", DbType = DatabaseType.@Table.DbType@(Table.IsView? ", IsView = true" : ""))]
    public partial class @Table.Name@(Config.RenderGenEntity ? "<TEntity> : I"+ Table.Name : " : I"+ Table.Name)
    {
        #region 属性
@foreach (IDataColumn Field in Table.Columns)
{
    String des = Field.Description;
    if (!String.IsNullOrEmpty(des))
        {
            des = des.Replace("\r\n", " ").Replace("\\", "\\\\").Replace("'", "").Replace("\"", "");
        }
    String dis = Field.DisplayName;
    if (!String.IsNullOrEmpty(dis))
        {
            dis = dis.Replace("\r\n", " ").Replace("'", " ").Replace("\"", "");
        }

    <text>        private @Field.DataType.Name _@Field.ColumnName;
        /// <summary>@des</summary>
        [DisplayName("@dis")]
        [Description("@des")]
        [DataObjectField(@Field.PrimaryKey.ToString().ToLower(), @Field.Identity.ToString().ToLower(), @Field.Nullable.ToString().ToLower(), @Field.Length)]
        [BindColumn("@Field.ColumnName", "@des", "@Field.RawType"@(Field.Master ? ", Master = " + Field.Master.ToString().ToLower() : ""))]
        public virtual @(Field.DataType == null ? "" : Field.DataType.Name) @Field.ColumnName
        {
            get { return _@Field.ColumnName; }
            set { if (OnPropertyChanging(__.@Field.ColumnName, value)) { _@Field.ColumnName = value; OnPropertyChanged(__.@Field.ColumnName); } }
        }

</text>
}Field.ColumnName
        #endregion

        #region 获取/设置 字段值
        /// <summary>
        /// 获取/设置 字段值。
        /// 一个索引，基类使用反射实现。
        /// 派生实体类可重写该索引，以避免反射带来的性能损耗
        /// </summary>
        /// <param name="name">字段名</param>
        /// <returns></returns>
        public override Object this[String name]
        {
            get
            {
                switch (name)
                {
@foreach(IDataColumn Field in Table.Columns)
{
    <text>                    case __.@(Field.ColumnName) : return _@(Field.ColumnName);
</text>
}
                    default: return base[name];
                }
            }
            set
            {
                switch (name)
                {
@{
    Type conv=typeof(Convert);
    foreach(IDataColumn Field in Table.Columns)
    {
        if(conv.GetMethod("To"+Field.DataType.Name, new Type[]{typeof(Object)})!=null)
        {
            <text>                    case __.@(Field.ColumnName) : _@(Field.ColumnName) = Convert.To@(Field.DataType.Name)(value); break;
</text>
        }
        else
        {
            <text>                    case __.@(Field.ColumnName) : _@(Field.ColumnName) = (@(Field.DataType.Name))value; break;
</text>
        }
    }
}
                    default: base[name] = value; break;
                }
            }
        }
        #endregion

        #region 字段名
        /// <summary>取得用户管理字段信息的快捷方式</summary>
        public partial class _
        {
@foreach(IDataColumn Field in Table.GetAllColumns(Tables, true))
{
    String des=Field.Description;
    if (!String.IsNullOrEmpty(des))
    {
        des = des.Replace("\r\n", " ");
    }
    <text>            ///<summary>@(des)</summary>
            public static readonly Field @(Field.ColumnName) = FindByName(__.@(Field.ColumnName));
</text>
}

            static Field FindByName(String name) { return Meta.Table.FindByName(name); }
        }

        /// <summary>取得@(tdis)字段名称的快捷方式</summary>
        partial class __
        {
@foreach(IDataColumn Field in Table.GetAllColumns(Tables, true))
{
    String des=Field.Description;
    if(!String.IsNullOrEmpty(des))
    {
        des=des.Replace("\r\n"," ");
    }
    <text>            ///<summary>@(des)</summary>
            public const String @(Field.ColumnName) = "@(Field.ColumnName)";
</text>
}
        }
        #endregion
    }

    /// <summary>@(tdis)接口</summary>
@if (tdis != tdes)
{
    <text>    /// <remarks>@(tdes)</remarks></text>
}
    public partial interface I@(Table.Name)@(!String.IsNullOrEmpty(Table.BaseType) ? " : I" + Table.BaseType : "")
    {
        #region 属性
@foreach(IDataColumn Field in Table.Columns)
{
    String des=Field.Description;
    if (!String.IsNullOrEmpty(des))
    {
        des = des.Replace("\r\n", " ");
    }
            <text>        ///<summary>@(des)</summary>
            @(Field.DataType==null?"":Field.DataType.Name) @(Field.ColumnName) { get; set; }
</text>
    }
        #endregion

        #region 获取/设置 字段值
        /// <summary>获取/设置 字段值。</summary>
        /// <param name="name">字段名</param>
        /// <returns></returns>
        Object this[String name] { get; set; }
        #endregion
    }
}
